# Cloud Build: construye y publica imágenes de los microservicios SGA
# Ejemplos de uso:
#   gcloud builds submit --config=cloudbuild.yaml
#   gcloud builds submit --config=cloudbuild.yaml --substitutions=_SERVICES="core_sga ai_engine",_DEPLOY="true"
#   gcloud builds submit --config=cloudbuild.yaml --substitutions=_EXTRA_TAG="staging"
#
# _SERVICES acepta lista separada por comas o espacios.

timeout: 3600s   # Ajusta si necesitas más tiempo (1h)
options:
  logging: CLOUD_LOGGING_ONLY
  machineType: E2_HIGHCPU_8  # Opcional: acelerar builds paralelos de Docker

substitutions:
  _SERVICES: "core_sga,ai_engine,risk_engine,compliance_engine,objectives_engine,ghg_engine,audit_engine,auth_engine,reporting_engine"
  _EXTRA_TAG: ""
  _DEPLOY: "false"
  _REGION: "southamerica-east1"

steps:
  # Paso 1: Verificación de Dockerfiles
  - name: gcr.io/cloud-builders/gcloud
    id: verify-dockerfiles
    entrypoint: bash
    args:
      - -c
      - |
        set -euo pipefail
        echo "Lista cruda: '${_SERVICES}'"
        RAW_INPUT="${_SERVICES}"
        RAW_INPUT="$(echo "$RAW_INPUT" | tr ',' ' ' )"
        SERVICES_LIST=""
        for s in $RAW_INPUT; do
          [ -n "$s" ] || continue
          SERVICES_LIST+=" $s"
        done
        SERVICES_LIST="$(echo "$SERVICES_LIST" | xargs)"
        echo "Servicios normalizados: $SERVICES_LIST"
        echo "SERVICES_LIST=\"$SERVICES_LIST\"" > /workspace/services.env

        echo "Verificando Dockerfiles..."
        for svc in $SERVICES_LIST; do
          FILE="services/$svc/Dockerfile"
          if [ -f "$FILE" ]; then
            head_line=$(head -n1 "$FILE" || true)
            if ! grep -Eiq '^(FROM|ARG)' <<< "$head_line"; then
              echo "ADVERTENCIA: Primera línea de $FILE no parece comenzar con FROM o ARG: '$head_line'"
            fi
            echo "OK: $FILE"
          else
            echo "ERROR: Falta $FILE" >&2
            exit 1
          fi
        done
        echo "Verificación completada."

  # Paso 2: Build & Push de imágenes (con BuildKit)
  - name: gcr.io/cloud-builders/docker
    id: build-and-push
    entrypoint: bash
    env:
      - DOCKER_BUILDKIT=1
    args:
      - -c
      - |
        set -euo pipefail
        source /workspace/services.env
        REGISTRY="us-central1-docker.pkg.dev/$PROJECT_ID/sga-services"
        echo "Registro destino: $REGISTRY"
        echo "SHORT_SHA: $SHORT_SHA"
        [ -n "${_EXTRA_TAG}" ] && echo "Tag extra: ${_EXTRA_TAG}" || echo "Sin tag extra"

        for svc in $SERVICES_LIST; do
          IMAGE_BASENAME="${svc//_/-}-api"
          FULL_BASE="$REGISTRY/$IMAGE_BASENAME"
          CONTEXT_DIR="services/$svc"
          if [ ! -d "$CONTEXT_DIR" ]; then
            echo "ERROR: No existe el directorio $CONTEXT_DIR" >&2
            exit 1
          fi
          echo "--------------------------------------------------"
          echo "Construyendo $svc -> $FULL_BASE"
          docker build \
            --pull \
            -t "$FULL_BASE:latest" \
            -t "$FULL_BASE:$SHORT_SHA" \
            "$CONTEXT_DIR"

          if [ -n "${_EXTRA_TAG}" ]; then
            docker tag "$FULL_BASE:latest" "$FULL_BASE:${_EXTRA_TAG}"
          fi

          echo "Push de latest..."
          docker push "$FULL_BASE:latest"
          echo "Push de $SHORT_SHA..."
          docker push "$FULL_BASE:$SHORT_SHA"
          if [ -n "${_EXTRA_TAG}" ]; then
            echo "Push de tag extra ${_EXTRA_TAG}..."
            docker push "$FULL_BASE:${_EXTRA_TAG}"
          fi
        done
        echo "Build & Push completados."

  # Paso 3 (Opcional): Despliegue a Cloud Run
  - name: gcr.io/cloud-builders/gcloud
    id: deploy-services
    entrypoint: bash
    args:
      - -c
      - |
        set -euo pipefail
        if [ "${_DEPLOY,,}" != "true" ]; then
          echo "Despliegue omitido (_DEPLOY != true)."
          exit 0
        fi
        source /workspace/services.env
        REGISTRY="us-central1-docker.pkg.dev/$PROJECT_ID/sga-services"
        REGION="${_REGION}"
        echo "Desplegando a Cloud Run en región: $REGION"
        for svc in $SERVICES_LIST; do
          IMAGE_BASENAME="${svc//_/-}-api"
          IMAGE="$REGISTRY/$IMAGE_BASENAME:latest"
          SERVICE_NAME="$IMAGE_BASENAME"
          echo "Deploy -> $SERVICE_NAME"
          gcloud run deploy "$SERVICE_NAME" \
            --image="$IMAGE" \
            --platform=managed \
            --region="$REGION" \
            --allow-unauthenticated \
            --project="$PROJECT_ID"
        done
        echo "Despliegue completado."

images:
  - us-central1-docker.pkg.dev/$PROJECT_ID/sga-services/core-sga-api:latest
  - us-central1-docker.pkg.dev/$PROJECT_ID/sga-services/ai-engine-api:latest
  - us-central1-docker.pkg.dev/$PROJECT_ID/sga-services/risk-engine-api:latest
  - us-central1-docker.pkg.dev/$PROJECT_ID/sga-services/compliance-engine-api:latest
  - us-central1-docker.pkg.dev/$PROJECT_ID/sga-services/objectives-engine-api:latest
  - us-central1-docker.pkg.dev/$PROJECT_ID/sga-services/ghg-engine-api:latest
  - us-central1-docker.pkg.dev/$PROJECT_ID/sga-services/audit-engine-api:latest
  - us-central1-docker.pkg.dev/$PROJECT_ID/sga-services/auth-engine-api:latest
  - us-central1-docker.pkg.dev/$PROJECT_ID/sga-services/reporting-engine-api:latest
