# Cloud Build: construye y publica imágenes de los microservicios SGA
# Ejemplos:
#   gcloud builds submit --config=cloudbuild.yaml
#   gcloud builds submit --config=cloudbuild.yaml --substitutions=_SERVICES="core_sga ai_engine",_DEPLOY="true"
#   gcloud builds submit --config=cloudbuild.yaml --substitutions=_EXTRA_TAG="staging"
#
# _SERVICES acepta lista separada por comas o espacios.

timeout: 3600s
options:
  logging: CLOUD_LOGGING_ONLY
  machineType: E2_HIGHCPU_8

substitutions:
  _SERVICES: "core_sga,ai_engine,risk_engine,compliance_engine,objectives_engine,ghg_engine,audit_engine,auth_engine,reporting_engine"
  _EXTRA_TAG: ""
  _DEPLOY: "false"
  _REGION: "southamerica-east1"

steps:
  # Paso 1: Verificación de Dockerfiles
  - name: gcr.io/cloud-builders/gcloud
    id: verify-dockerfiles
    entrypoint: bash
    args:
      - -c
      - |
        set -euo pipefail
        echo "Lista cruda: '${_SERVICES}'"
        raw_input="${_SERVICES}"
        raw_input="$(echo "$raw_input" | tr ',' ' ' )"
        services_list=""
        for s in $raw_input; do
          [ -n "$s" ] || continue
          services_list+=" $s"
        done
        services_list="$(echo "$services_list" | xargs)"
        echo "Servicios normalizados: $services_list"
        printf 'services_list="%s"
' "$services_list" > /workspace/services.env

        echo "Verificando Dockerfiles..."
        for svc in $services_list; do
          file="services/$svc/Dockerfile"
          if [ -f "$file" ]; then
            head_line=$(head -n1 "$file" || true)
            if ! grep -Eiq '^(FROM|ARG)' <<< "$head_line"; then
              echo "ADVERTENCIA: Primera línea de $file no comienza con FROM o ARG: '$head_line'"
            fi
            echo "OK: $file"
          else
            echo "ERROR: Falta $file" >&2
            exit 1
          fi
        done
        echo "Verificación completada."

  # Paso 2: Build & Push de imágenes (BuildKit)
  - name: gcr.io/cloud-builders/docker
    id: build-and-push
    entrypoint: bash
    env:
      - DOCKER_BUILDKIT=1
    args:
      - -c
      - |
        set -euo pipefail
        source /workspace/services.env
        registry="us-central1-docker.pkg.dev/$PROJECT_ID/sga-services"
        echo "Registro destino: $registry"
        echo "SHORT_SHA: $SHORT_SHA"
        if [ -n "${_EXTRA_TAG}" ]; then
          echo "Tag extra: ${_EXTRA_TAG}"
        else
          echo "Sin tag extra"
        fi

        for svc in $services_list; do
          image_basename="${svc//_/-}-api"
          full_base="$registry/$image_basename"
          context_dir="services/$svc"
          if [ ! -d "$context_dir" ]; then
            echo "ERROR: No existe el directorio $context_dir" >&2
            exit 1
          fi
          echo "--------------------------------------------------"
          echo "Construyendo $svc -> $full_base"
          docker build \
            --pull \
            -t "$full_base:latest" \
            -t "$full_base:$SHORT_SHA" \
            "$context_dir"

          if [ -n "${_EXTRA_TAG}" ]; then
            docker tag "$full_base:latest" "$full_base:${_EXTRA_TAG}"
          fi

          echo "Push de latest..."
          docker push "$full_base:latest"
          echo "Push de $SHORT_SHA..."
          docker push "$full_base:$SHORT_SHA"
          if [ -n "${_EXTRA_TAG}" ]; then
            echo "Push de tag extra ${_EXTRA_TAG}..."
            docker push "$full_base:${_EXTRA_TAG}"
          fi
        done
        echo "Build & Push completados."

  # Paso 3 (Opcional): Despliegue a Cloud Run
  - name: gcr.io/cloud-builders/gcloud
    id: deploy-services
    entrypoint: bash
    args:
      - -c
      - |
        set -euo pipefail
        deploy_flag="$(echo "${_DEPLOY}" | tr '[:upper:]' '[:lower:]')"
        if [ "$deploy_flag" != "true" ]; then
          echo "Despliegue omitido (_DEPLOY != true)."
          exit 0
        fi
        source /workspace/services.env
        registry="us-central1-docker.pkg.dev/$PROJECT_ID/sga-services"
        region="${_REGION}"
        echo "Desplegando a Cloud Run en región: $region"
        for svc in $services_list; do
          image_basename="${svc//_/-}-api"
          image="$registry/$image_basename:latest"
          service_name="$image_basename"
          echo "Deploy -> $service_name"
          gcloud run deploy "$service_name" \
            --image="$image" \
            --platform=managed \
            --region="$region" \
            --allow-unauthenticated \
            --project="$PROJECT_ID"
        done
        echo "Despliegue completado."

images:
  - us-central1-docker.pkg.dev/$PROJECT_ID/sga-services/core-sga-api:latest
  - us-central1-docker.pkg.dev/$PROJECT_ID/sga-services/ai-engine-api:latest
  - us-central1-docker.pkg.dev/$PROJECT_ID/sga-services/risk-engine-api:latest
  - us-central1-docker.pkg.dev/$PROJECT_ID/sga-services/compliance-engine-api:latest
  - us-central1-docker.pkg.dev/$PROJECT_ID/sga-services/objectives-engine-api:latest
  - us-central1-docker.pkg.dev/$PROJECT_ID/sga-services/ghg-engine-api:latest
  - us-central1-docker.pkg.dev/$PROJECT_ID/sga-services/audit-engine-api:latest
  - us-central1-docker.pkg.dev/$PROJECT_ID/sga-services/auth-engine-api:latest
  - us-central1-docker.pkg.dev/$PROJECT_ID/sga-services/reporting-engine-api:latest
